import math
board = [' ' for _ in range(9)]
human = 'O'
ai = 'X'
def print_board(board):
    for row in [board[i*3:(i+1)*3] for i in range(3)]:
        print('| ' + ' | '.join(row) + ' |')
def is_winner(board, player):
    win_conditions = [
        [board[0], board[1], board[2]],
        [board[3], board[4], board[5]],
        [board[6], board[7], board[8]],
        [board[0], board[3], board[6]],
        [board[1], board[4], board[7]],
        [board[2], board[5], board[8]],
        [board[0], board[4], board[8]],
        [board[2], board[4], board[6]],
    ]
    return [player, player, player] in win_conditions
def is_board_full(board):
    return ' ' not in board
def get_available_moves(board):
    return [i for i, spot in enumerate(board) if spot == ' ']
def minimax(board, depth, is_maximizing):
    if is_winner(board, ai):
        return 1
    elif is_winner(board, human):
        return -1
    elif is_board_full(board):
        return 0
    if is_maximizing:
        best_score = -math.inf
        for move in get_available_moves(board):
            board[move] = ai
            score = minimax(board, depth + 1, False)
            board[move] = ' '
            best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for move in get_available_moves(board):
            board[move] = human
            score = minimax(board, depth + 1, True)
            board[move] = ' '
            best_score = min(score, best_score)
        return best_score
def find_best_move(board):
    best_score = -math.inf
    best_move = None
    for move in get_available_moves(board):
        board[move] = ai
        score = minimax(board, 0, False)
        board[move] = ' '
        if score > best_score:
            best_score = score
            best_move = move
    return best_move
def play_game():
    while True:
        print_board(board)
        if is_winner(board, human):
            print("Human wins!")
            break
        elif is_winner(board, ai):
            print("AI wins!")
            break
        elif is_board_full(board):
            print("It's a draw!")
            break
        human_move = int(input("Enter your move (0-8): "))
        if board[human_move] == ' ':
            board[human_move] = human
        else:
            print("Invalid move. Try again.")
            continue
        ai_move = find_best_move(board)
        if ai_move is not None:
            board[ai_move] = ai
play_game()
4
